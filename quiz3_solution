import numpy as np
import pandas as pd

import matplotlib.pyplot as plt

# Import datasets, classifiers and performance metrics
from sklearn import datasets, svm, metrics
from sklearn.model_selection import train_test_split


digits = datasets.load_digits()

_, axes = plt.subplots(nrows=1, ncols=4, figsize=(10, 3))
for ax, image, label in zip(axes, digits.images, digits.target):
    ax.set_axis_off()
    ax.imshow(image, cmap=plt.cm.gray_r, interpolation="nearest")
    ax.set_title("Training: %i" % label)

n_samples = len(digits.images)
data = digits.images.reshape((n_samples, -1))

# Create a classifier: a support vector classifier
clf = svm.SVC(gamma=0.001)

# Split data into 50% train and 50% test subsets
train_frac = 0.7
test_frac = 0.2
dev_frac = 0.1


n_samples = len(digits.images)
data = digits.images.reshape((n_samples, -1))


svm_acc = []
dt_acc = []

#PART: define train/dev/test splits of experiment protocol
# train to train model
# dev to set hyperparameters of the model
# test to evaluate the performance of the model
dev_test_frac = 1-train_frac


X_train1, X_dev_test1, y_train1, y_dev_test1 = train_test_split(
data, digits.target, test_size=dev_test_frac, shuffle=True
)
X_test1, X_dev1, y_test1, y_dev1 = train_test_split(
X_dev_test1, y_dev_test1, test_size=(dev_frac)/dev_test_frac, shuffle=True
)
clf.fit(X_train1, y_train1)
print("Here are the unique case: ",X_dev1)
ypred = clf.predict(X_dev1)
print("Here are the unique case: ",ypred)

